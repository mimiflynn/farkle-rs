{"version":3,"sources":["components/add-player.js","components/player.js","pages/setup.js","components/edit-player-score.js","components/player-score.js","pages/game.js","components/nav.js","components/reference.js","components/rules.js","App.js","serviceWorker.js","index.js"],"names":["AddPlayer","props","useState","value","setValue","className","type","name","placeholder","aria-label","onChange","event","target","id","onClick","preventDefault","handleSave","Player","edit","setEdit","player","editPlayer","handleEdit","readOnly","handleRemove","Setup","players","setPlayers","handleEditPlayer","oldPlayer","newPlayer","newPlayers","slice","indexOf","handleRemovePlayer","index","splice","map","key","disabled","length","EditPlayerScore","scorecard","onBoard","PlayerScore","classNames","total","role","turns","Game","scorecards","setScorecards","selectedPlayer","setSelectedPlayer","handleSetScore","newScore","console","log","recentPlayerIndex","handleNextPlayer","Nav","children","Reference","Rules","App","reference","setReference","handleSetPlayers","allPlayers","newScoreCards","forEach","parseInt","setAllScorecards","handleUpdateScores","score","cardToUpdate","updatedScoreCards","Object","assign","renderGame","renderReference","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAEO,SAASA,EAAUC,GAAQ,IAAD,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAa7B,OACI,8BACI,yBAAKC,UAAU,oBACX,2BACIC,KAAK,OACLC,KAAK,SACLF,UAAU,eAAeG,YAAY,SACrCC,aAAW,SACXN,MAAOA,EACPO,SAnBhB,SAA2BC,GACvBP,EAASO,EAAMC,OAAOT,UAmBd,yBAAKE,UAAU,sBACX,4BACIA,UAAU,4BACVC,KAAK,SACLO,GAAG,gBACHC,QArBpB,SAAyBH,GACrBA,EAAMI,iBACNd,EAAMe,WAAWb,GACjBC,EAAS,MAcG,UCxBb,SAASa,EAAOhB,GAAQ,IAAD,EACFC,oBAAS,GADP,mBACnBgB,EADmB,KACbC,EADa,OAEAjB,mBAASD,EAAMmB,QAFf,mBAEnBjB,EAFmB,KAEZC,EAFY,KAwBpBiB,EACF,8BACI,yBAAKhB,UAAU,oBACX,2BACIC,KAAK,OACLC,KAAK,SACLF,UAAU,eAAeG,YAAY,SACrCC,aAAW,SACXN,MAAOA,EACPO,SA7BU,SAACC,GACvBP,EAASO,EAAMC,OAAOT,UA6Bd,yBAAKE,UAAU,sBACX,4BACIA,UAAU,4BACVC,KAAK,SACLO,GAAG,gBACHC,QA/BI,SAACH,GACrBA,EAAMI,iBACNd,EAAMqB,WAAWrB,EAAMmB,OAAQjB,GAC/BgB,GAAQ,KAwBI,WAYVC,EACF,yBAAKf,UAAU,oBACX,2BACIC,KAAK,OACLC,KAAK,SACLF,UAAU,eAAeG,YAAY,SACrCC,aAAW,SACXN,MAAOF,EAAMmB,OACbG,UAAQ,IACZ,yBAAKlB,UAAU,sBACX,4BACIA,UAAU,4BACVC,KAAK,SACLO,GAAG,gBACHC,QA/CS,SAACH,GACtBA,EAAMI,iBACNI,GAAQ,KAyCA,QAOA,4BACId,UAAU,yBACVC,KAAK,SACLO,GAAG,gBACHC,QAjDW,SAACH,GACxBA,EAAMI,iBACNd,EAAMuB,aAAavB,EAAMmB,UA2CjB,YAmBZ,OAPQF,EACOG,EAEAD,EC5EZ,SAASK,EAAMxB,GAAQ,IAAD,EACKC,mBAAS,IADd,mBAClBwB,EADkB,KACTC,EADS,KAWzB,SAASC,EAAiBC,EAAWC,GACjC,IAAMC,EAAaL,EAAQM,QAE3BD,EADcL,EAAQO,QAAQJ,IACVC,EACpBH,EAAWI,GAGf,SAASG,EAAmBL,GACxB,IAAME,EAAaL,EAAQM,QACrBG,EAAQT,EAAQO,QAAQJ,GAC9BE,EAAWK,OAAOD,EAAO,GACzBR,EAAWI,GAYf,OACI,6BACI,uCACA,yBAAK1B,UAAU,eACX,yBAAKA,UAAU,UACX,kBAACL,EAAD,CAAWgB,WApC3B,SAAyBc,GACrBH,EAAW,CAACG,GAAF,mBAAgBJ,UAsCtB,yBAAKrB,UAAU,OACX,yBAAKA,UAAU,UAjBhBqB,EAAQW,KAAI,SAACjB,GAAD,OACf,kBAACH,EAAD,CAAQqB,IAAKlB,EACTA,OAAQA,EACRE,WAAYM,EACZJ,aAAcU,SAiBlB,4BACI7B,UAAU,kBACVkC,SAA6B,IAAnBb,EAAQc,OAClB1B,QA3CZ,WACIb,EAAM0B,WAAWD,KAuCb,eClDL,SAASe,EAAgBxC,GAC5B,IAAMmB,EAASnB,EAAMmB,OACfsB,EAAYzC,EAAMyC,UAFW,EAGTxC,mBAAS,IAHA,mBAG5BC,EAH4B,KAGrBC,EAHqB,KAenC,OACI,yBAAKkC,IAAKlB,EACNf,UAAWqC,EAAUC,QAAU,WAAa,aAC5C,4BAAKvB,GACL,8BACI,yBAAKf,UAAU,oBACX,2BACIC,KAAK,OACLC,KAAK,QACLF,UAAU,eAAeG,YAAY,QACrCC,aAAW,QACXN,MAAOA,EACPO,SAtBpB,SAA2BC,GACvBP,EAASO,EAAMC,OAAOT,UAsBV,yBAAKE,UAAU,sBACX,4BACIA,UAAU,4BACVC,KAAK,SACLO,GAAG,gBACHC,QAxBxB,SAAwBH,GACpBA,EAAMI,iBACNd,EAAMe,WAAWb,GACjBC,EAAS,MAiBO,Y,oBC5BjB,SAASwC,EAAY3C,GACxB,IAAMmB,EAASnB,EAAMmB,OACfsB,EAAYzC,EAAMyC,UAsBxB,OACI,yBAAKrC,UAAWwC,IAAW,OAAQ,CAC/B,WAAYH,EAAUC,UACtBL,IAAKlB,GACL,yBAAKf,UAAU,aAvBK,IAApBqC,EAAUI,MAEN,yBAAKzC,UAAU,sBAAsB0C,KAAK,SAA1C,4DAKJL,EAAUI,OAAS,MACS,IAA3BJ,EAAUM,MAAMR,QACmC,IAAhDE,EAAUM,MAAMN,EAAUM,MAAMR,OAAS,IAGzC,yBAAKnC,UAAU,sBAAsB0C,KAAK,SAA1C,kCAND,EAmBC,wBAAI1C,UAAU,cAAce,GAC5B,uBAAGf,UAAU,aAAb,UAAiCqC,EAAUI,SC7BpD,SAASG,EAAKhD,GACjB,IAAMyB,EAAUzB,EAAMyB,QAChBwB,EAAajD,EAAMiD,WACnBC,EAAgBlD,EAAMkD,cAHJ,EAKoBjD,mBAASwB,EAAQ,IALrC,mBAKjB0B,EALiB,KAKDC,EALC,KAOxB,SAASC,EAAeC,GACpBC,QAAQC,IAAI,YAAaF,GACzBC,QAAQC,IAAI,aAAcL,GAC1BD,EAAcC,EAAgBG,GAIlC,WACI,IAAMG,EAAoBhC,EAAQO,QAAQmB,GACtCM,IAAsBhC,EAAQc,OAAS,EAEvCa,EAAkB3B,EAAQ,IAE1B2B,EAAkB3B,EAAQgC,EAAoB,IATlDC,GA0CJ,OACI,6BACI,yCACA,yBAAKtD,UAAU,YA/BZJ,EAAMyB,QAAQW,KAAI,SAACjB,GAAD,OACrB,yBACIf,UAAU,SACViC,IAAKlB,GACL,kBAACwB,EAAD,CACIxB,OAAQA,EACRsB,UAAWQ,EAAW9B,UAO9BgC,EAEI,kBAACX,EAAD,CACIrB,OAAQgC,EACRV,UAAWQ,EAAWE,GACtBpC,WAAYsC,IAKhB,mDCnDT,SAASM,EAAT,GAA4B,IAAbC,EAAY,EAAZA,SAClB,OACI,yBAAKxD,UAAU,+DACX,0BAAMA,UAAU,gBAAhB,oBAIA,yBAAKA,UAAU,2BAA2BQ,GAAG,0BACxCgD,ICRV,SAASC,EAAU7D,GACtB,OACI,yBAAKI,UAAWJ,EAAMI,WAClB,4BACI,wCACA,wCACA,wCACA,0CACA,qCACA,0CACA,qCACA,0CACA,qCACA,0CACA,qCACA,0CACA,qCACA,0CACA,qCACA,0CACA,8CACA,4CACA,8CACA,4CACA,6CACA,4CACA,iDACA,4CACA,2CACA,4CACA,uDACA,qCACA,2DACA,uCCjCT,SAAS0D,EAAM9D,GAClB,OACI,yBAAKI,UAAWJ,EAAMI,WAClB,8CACA,uOACA,oDACA,0XACA,iDACA,yeACA,uIACA,iHACA,wCACA,6YACA,gDACA,uP,MCiGG2D,MAxGf,WAAgB,IAAD,EACmB9D,mBAAS,IAD5B,mBACJwB,EADI,KACKC,EADL,OAEuBzB,oBAAS,GAFhC,mBAEJ+D,EAFI,KAEOC,EAFP,OAGyBhE,mBAAS,IAHlC,mBAGJgD,EAHI,KAGQC,EAHR,KASX,SAASgB,EAAiBC,GACtBzC,EAAWyC,GAIf,SAA0BA,GACtB,IAAMC,EAAgB,GAEtBD,EAAWE,SAAQ,SAAClD,GAChBiD,EAAcjD,GAAU,CACpB4B,MAAO,GACPF,MAAOyB,SAAS,EAAG,IACnB5B,SAAS,MAIjBQ,EAAckB,GAddG,CAAiBJ,GAiBrB,SAASK,EAAmBrD,EAAQsD,GAChC,IAAMC,EAAezB,EAAW9B,GAEhC,GAAIuD,EAAahC,SAAW+B,GAAS,IAAK,CACtC,IAAME,EAAoB,GACpB9B,EAAQyB,SAASG,EAAO,IAAMC,EAAa7B,MAEjD8B,EAAkBxD,GAAUyD,OAAOC,OAAO,GAAIH,EAAc,CACxD3B,MAAM,GAAD,mBAAM2B,EAAa3B,OAAU,CAAC0B,IACnC5B,QACAH,UAAUgC,EAAahC,SAAW4B,SAASG,EAAO,IAAMC,EAAa7B,MAAS,MAGlFK,EAAc0B,OAAOC,OAAO,GAAI5B,EAAY0B,KAmCpD,OACI,6BACI,kBAAChB,EAAD,KACI,wBAAIvD,UAAU,sBACV,wBAAIA,UAAU,YACV,4BACIA,UAAU,eACVS,QAXxB,WACIa,EAAW,MAQK,aAMJ,wBAAItB,UAAU,YACV,4BACIA,UAAU,eACVS,QArFxB,WACIoD,GAAcD,KAqFOA,EAAY,OAAS,gBAKtC,yBAAK5D,UAAU,4BAnDvB,WACI,IAAK4D,EACD,OAAuB,IAAnBvC,EAAQc,OAEJ,kBAACf,EAAD,CAAOE,WAAYwC,IAInB,kBAAClB,EAAD,CAAMvB,QAASA,EACXwB,WAAYA,EACZC,cAAesB,IA0CtBM,GApCb,WACI,GAAId,EACA,OACI,yBAAK5D,UAAU,OACX,kBAAC0D,EAAD,CAAO1D,UAAU,UACjB,kBAACyD,EAAD,CAAWzD,UAAU,WAgCxB2E,MC/FGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c36e4afa.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport function AddPlayer(props) {\n    const [value, setValue] = useState('');\n\n    function handleInputUpdate(event) {\n        setValue(event.target.value);\n    }\n\n    function handleAddPlayer(event) {\n        event.preventDefault();\n        props.handleSave(value);\n        setValue('');\n    };\n\n    return (\n        <form>\n            <div className=\"input-group mb-3\">\n                <input\n                    type=\"text\"\n                    name=\"player\"\n                    className=\"form-control\" placeholder=\"Player\"\n                    aria-label=\"Player\"\n                    value={value}\n                    onChange={handleInputUpdate} />\n                <div className=\"input-group-append\">\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"submit\"\n                        id=\"button-addon2\"\n                        onClick={handleAddPlayer}>\n                        Add\n                        </button>\n                </div>\n            </div>\n        </form>\n    );\n}","import React, { useState } from 'react';\n\nexport function Player(props) {\n    const [edit, setEdit] = useState(false);\n    const [value, setValue] = useState(props.player);\n\n    const handleInputUpdate = (event) => {\n        setValue(event.target.value);\n    }\n\n    const handleAddPlayer = (event) => {\n        event.preventDefault();\n        props.handleEdit(props.player, value);\n        setEdit(false);\n    };\n\n    const handleEditPlayer = (event) => {\n        event.preventDefault();\n        setEdit(true);\n    };\n\n    const handleRemovePlayer = (event) => {\n        event.preventDefault();\n        props.handleRemove(props.player);\n    };\n\n    const editPlayer = (\n        <form>\n            <div className=\"input-group mb-3\">\n                <input\n                    type=\"text\"\n                    name=\"player\"\n                    className=\"form-control\" placeholder=\"Player\"\n                    aria-label=\"Player\"\n                    value={value}\n                    onChange={handleInputUpdate} />\n                <div className=\"input-group-append\">\n                    <button\n                        className=\"btn btn-outline-secondary\"\n                        type=\"submit\"\n                        id=\"button-addon2\"\n                        onClick={handleAddPlayer}>\n                        Save\n                            </button>\n                </div>\n            </div>\n        </form >\n    );\n\n    const player = (\n        <div className=\"input-group mb-3\">\n            <input\n                type=\"text\"\n                name=\"player\"\n                className=\"form-control\" placeholder=\"Player\"\n                aria-label=\"Player\"\n                value={props.player}\n                readOnly />\n            <div className=\"input-group-append\">\n                <button\n                    className=\"btn btn-outline-secondary\"\n                    type=\"submit\"\n                    id=\"button-addon2\"\n                    onClick={handleEditPlayer}>\n                    Edit\n                 </button>\n                <button\n                    className=\"btn btn-outline-danger\"\n                    type=\"submit\"\n                    id=\"button-addon2\"\n                    onClick={handleRemovePlayer}>\n                    Remove\n                 </button>\n            </div>\n        </div>\n    );\n\n    const renderPlayer = () => {\n        if (edit) {\n            return editPlayer;\n        } else {\n            return player;\n        }\n    }\n\n    return renderPlayer();\n}","import React, { useState } from 'react';\n\nimport { AddPlayer } from '../components/add-player';\nimport { Player } from '../components/player';\n\nexport function Setup(props) {\n    const [players, setPlayers] = useState([]);\n\n    function handleAddPlayer(newPlayer) {\n        setPlayers([newPlayer, ...players]);\n    };\n\n    function handleSavePlayers() {\n        props.setPlayers(players);\n    }\n\n    function handleEditPlayer(oldPlayer, newPlayer) {\n        const newPlayers = players.slice();\n        const index = players.indexOf(oldPlayer);\n        newPlayers[index] = newPlayer;\n        setPlayers(newPlayers);\n    }\n\n    function handleRemovePlayer(oldPlayer) {\n        const newPlayers = players.slice();\n        const index = players.indexOf(oldPlayer);\n        newPlayers.splice(index, 1);\n        setPlayers(newPlayers);\n    }\n\n    function renderPlayers() {\n        return players.map((player) => (\n            <Player key={player}\n                player={player}\n                handleEdit={handleEditPlayer}\n                handleRemove={handleRemovePlayer} />\n        ));\n    }\n\n    return (\n        <div>\n            <h2>Players</h2>\n            <div className=\"row players\">\n                <div className=\"col-12\">\n                    <AddPlayer handleSave={handleAddPlayer} />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    {renderPlayers()}\n                </div>\n            </div>\n            <button\n                className=\"btn btn-primary\"\n                disabled={players.length === 0}\n                onClick={handleSavePlayers}>\n                Start Game\n            </button>\n        </div>\n    )\n}","import React, { useState } from 'react';\n\nexport function EditPlayerScore(props) {\n    const player = props.player;\n    const scorecard = props.scorecard;\n    const [value, setValue] = useState('');\n\n    function handleInputUpdate(event) {\n        setValue(event.target.value);\n    }\n\n    function handleSetScore(event) {\n        event.preventDefault();\n        props.handleSave(value);\n        setValue('');\n    };\n\n    return (\n        <div key={player}\n            className={scorecard.onBoard ? 'on-board' : 'off-board'}>\n            <h3>{player}</h3>\n            <form>\n                <div className=\"input-group mb-3\">\n                    <input\n                        type=\"text\"\n                        name=\"score\"\n                        className=\"form-control\" placeholder=\"Score\"\n                        aria-label=\"Score\"\n                        value={value}\n                        onChange={handleInputUpdate} />\n                    <div className=\"input-group-append\">\n                        <button\n                            className=\"btn btn-outline-secondary\"\n                            type=\"submit\"\n                            id=\"button-addon2\"\n                            onClick={handleSetScore}>\n                            Save\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    )\n}","import React from 'react';\nimport classNames from 'classnames';\n\nexport function PlayerScore(props) {\n    const player = props.player;\n    const scorecard = props.scorecard;\n\n    function renderBoardMessages() {\n        if (scorecard.total === 0) {\n            return (\n                <div className=\"alert alert-warning\" role=\"alert\">\n                    A score of 500 is needed in one roll to be on the board.\n                </div>\n            )\n        } else if (\n            scorecard.total >= 500 &&\n            (scorecard.turns.length === 1 ||\n                scorecard.turns[scorecard.turns.length - 2] === 0)\n        ) {\n            return (\n                <div className=\"alert alert-success\" role=\"alert\">\n                    You are now on the board!\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div className={classNames('card', {\n            'on-board': scorecard.onBoard\n        })} key={player}>\n            <div className=\"card-body\">\n                {renderBoardMessages()}\n                <h5 className=\"card-title\">{player}</h5>\n                <p className=\"card-text\">Total: {scorecard.total}</p>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\n\nimport { EditPlayerScore } from '../components/edit-player-score';\nimport { PlayerScore } from '../components/player-score';\n\nexport function Game(props) {\n    const players = props.players;\n    const scorecards = props.scorecards;\n    const setScorecards = props.setScorecards;\n\n    const [selectedPlayer, setSelectedPlayer] = useState(players[0]);\n\n    function handleSetScore(newScore) {\n        console.log('new score', newScore);\n        console.log('for player', selectedPlayer);\n        setScorecards(selectedPlayer, newScore);\n        handleNextPlayer();\n    };\n\n    function handleNextPlayer() {\n        const recentPlayerIndex = players.indexOf(selectedPlayer);\n        if (recentPlayerIndex === players.length - 1) {\n            // last player so loop to first player\n            setSelectedPlayer(players[0]);\n        } else {\n            setSelectedPlayer(players[recentPlayerIndex + 1]);\n        }\n    }\n\n    function renderPlayers() {\n        return props.players.map((player) => (\n            <div\n                className=\"col-sm\"\n                key={player}>\n                <PlayerScore\n                    player={player}\n                    scorecard={scorecards[player]}\n                />\n            </div>\n        ));\n    }\n\n    function renderCurrentPlayer() {\n        if (selectedPlayer) {\n            return (\n                <EditPlayerScore\n                    player={selectedPlayer}\n                    scorecard={scorecards[selectedPlayer]}\n                    handleSave={handleSetScore}\n                />\n            )\n        } else {\n            return (\n                <h3>no player selected</h3>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <h2>Scorecard</h2>\n            <div className=\"row mb-5\">\n                {renderPlayers()}\n            </div>\n            {renderCurrentPlayer()}\n        </div>\n    )\n};","import React from 'react';\n\nexport function Nav({ children }) {\n    return (\n        <nav className=\"position-sticky navbar navbar-expand-lg navbar-dark bg-dark\">\n            <span className=\"navbar-brand\">\n                Farkle Scorecard\n            </span>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                {children}\n            </div>\n        </nav >\n    );\n}","import React from 'react';\n\nexport function Reference(props) {\n    return (\n        <div className={props.className}>\n            <dl>\n                <dt>5′s</dt>\n                <dd>50 point</dd>\n                <dt>1′s</dt>\n                <dd>100 points</dd>\n                <dt>1,1,1</dt>\n                <dd>300 points</dd>\n                <dt>2,2,2</dt>\n                <dd>200 points</dd>\n                <dt>3,3,3</dt>\n                <dd>300 points</dd>\n                <dt>4,4,4</dt>\n                <dd>400 points</dd>\n                <dt>5,5,5</dt>\n                <dd>500 points</dd>\n                <dt>6,6,6</dt>\n                <dd>600 points</dd>\n                <dt>Four of a Kind</dt>\n                <dd>1,000 points</dd>\n                <dt>Five of a Kind</dt>\n                <dd>2,000 points</dd>\n                <dt>Six of a Kind</dt>\n                <dd>3,000 points</dd>\n                <dt>A Straight of 1-6</dt>\n                <dd>1,500 points</dd>\n                <dt>Three Pairs</dt>\n                <dd>1,500 points</dd>\n                <dt>Four of a Kind + a Pair</dt>\n                <dd>1,500</dd>\n                <dt>Two sets of Three of a Kind</dt>\n                <dd>2,500</dd>\n            </dl>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport function Rules(props) {\n    return (\n        <div className={props.className}>\n            <h2>Who Goes First</h2>\n            <p>Each player rolls one die, with the highest roll going first. In the event of a tie, the players who tied for the highest roll roll again. Once the first player is decided, play continues to the left.</p>\n            <h2>Getting on the Board</h2>\n            <p>Before points can be counted for any player, they must first &quot;get on the board&quot; by rolling at least 500 points in a turn. A player cannot &quot;farkle&quot; until they are on the board. Some believe that it is &quot;more fun&quot; to push the number of points needed to get on the scoreboard to 750 or even 1000, so, keep that in mind, if you want to have &quot;more fun&quot;.</p>\n            <h2>Rolling in a Turn</h2>\n            <p>To start a turn, roll all six dice. Set aside any dice that are worth points and roll the remaining dice. If you roll and no dice are worth any points, your turn is over. Continue rolling and setting aside scoring dice, adding the score to your total If all six dice are scoring dice, you may roll all six and add the subsequent points to your running total. Keep rolling until you feel you are pressing your luck and have the scorekeeper record your score. </p>\n            <p>If a die were to roll off the table or in some other awkward out of play kind of area, re-roll that die.</p>\n            <p>A player does not have to set aside all scoring dice in a roll, just at least one.</p>\n            <h2>Farkling</h2>\n            <p>Let&apos;s say that a player feels don&apos;t want to push their luck and want to record their score and end their turn. This player has a few dice remaining to roll. If the next player is on the board, they can decide roll the remaining dice from the previous player. If they gain points in that roll, they can then add those points to the score the previous player ended on.</p>\n            <h2>Winning the Game</h2>\n            <p>The first player to get 10,000 points wins only after each other player has a chance to beat their score in one last turn. If someone beats the original winner, each player has another chance to beat the new winner.</p>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\n\nimport { Setup } from './pages/setup';\nimport { Game } from './pages/game';\nimport { Nav } from './components/nav';\nimport { Reference } from './components/reference';\nimport { Rules } from './components/rules';\nimport './App.scss';\n\nfunction App() {\n    const [players, setPlayers] = useState([]);\n    const [reference, setReference] = useState(false);\n    const [scorecards, setScorecards] = useState({});\n\n    function handleToggleReference() {\n        setReference(!reference);\n    }\n\n    function handleSetPlayers(allPlayers) {\n        setPlayers(allPlayers);\n        setAllScorecards(allPlayers);\n    };\n\n    function setAllScorecards(allPlayers) {\n        const newScoreCards = {};\n\n        allPlayers.forEach((player) => {\n            newScoreCards[player] = {\n                turns: [],\n                total: parseInt(0, 10),\n                onBoard: false\n            };\n        });\n\n        setScorecards(newScoreCards);\n    }\n\n    function handleUpdateScores(player, score) {\n        const cardToUpdate = scorecards[player];\n\n        if (cardToUpdate.onBoard || score >= 500) {\n            const updatedScoreCards = {};\n            const total = parseInt(score, 10) + cardToUpdate.total;\n\n            updatedScoreCards[player] = Object.assign({}, cardToUpdate, {\n                turns: [...cardToUpdate.turns, ...[score]],\n                total,\n                onBoard: !cardToUpdate.onBoard ? (parseInt(score, 10) + cardToUpdate.total) > 500 : true\n            });\n\n            setScorecards(Object.assign({}, scorecards, updatedScoreCards));\n        }\n    }\n\n    function renderGame() {\n        if (!reference) {\n            if (players.length === 0) {\n                return (\n                    <Setup setPlayers={handleSetPlayers} />\n                );\n            } else {\n                return (\n                    <Game players={players}\n                        scorecards={scorecards}\n                        setScorecards={handleUpdateScores} />\n                );\n            }\n        }\n    }\n\n    function renderReference() {\n        if (reference) {\n            return (\n                <div className=\"row\">\n                    <Rules className=\"col-6\"></Rules>\n                    <Reference className=\"col-6\"></Reference>\n                </div>\n            )\n        }\n    }\n\n    function resetGame() {\n        setPlayers([]);\n    }\n\n    return (\n        <div>\n            <Nav>\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <button\n                            className=\"btn btn-link\"\n                            onClick={resetGame}>\n                            New Game\n                        </button>\n                    </li>\n                    <li className=\"nav-item\">\n                        <button\n                            className=\"btn btn-link\"\n                            onClick={handleToggleReference}>\n                            {reference ? 'Game' : 'Reference'}\n                        </button>\n                    </li>\n                </ul>\n            </Nav>\n            <div className=\"App container-fluid mt-3\">\n                {renderGame()}\n                {renderReference()}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}